/*
Test generated by RoostGPT for test Aayushree-Test using AI Type Open AI and AI Model gpt-4

1. Scenario: Valid Input Test
   - Description: Test the function with valid inputs to check if it returns the correct SVY21Coordinate.
   
2. Scenario: Null Input Test
   - Description: Test the function with null input to check if it handles null properly. Depending on the implementation of computeSVY21 method, it should either return null or throw an appropriate exception.

3. Scenario: Invalid Input Test
   - Description: Test the function with invalid inputs to check if it throws the appropriate exception.

4. Scenario: Type of Return Value Test
   - Description: Test the function to check if it returns an instance of SVY21Coordinate.

5. Scenario: Consistency Test
   - Description: Test the function with the same input multiple times to check if it consistently returns the same output.

6. Scenario: Large Input Test
   - Description: Test the function with large inputs to check if it can handle and return the expected result.

7. Scenario: Small Input Test
   - Description: Test the function with small inputs to check if it can handle and return the expected result.

8. Scenario: Boundary Input Test
   - Description: Test the function with boundary inputs (max and min values) to check if it handles edge cases properly.

9. Scenario: Random Input Test
   - Description: Test the function with random inputs to check the robustness of the function.

10. Scenario: Thread Safety Test
    - Description: Test the function in a multi-threaded environment to check if it is thread-safe. 

Please note that the exact test scenarios may vary depending on the business logic and requirements of the computeSVY21 method.
*/
package com.ttek.carparkfinder.gps;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class LatLonCoordinate_asSVY21_7b038d1317_Test {

    @Test
    public void testValidInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(1.3539, 103.8189);
        SVY21Coordinate expectedOutput = new SVY21Coordinate(31565.4, 28956.7);
        assertEquals(expectedOutput, latLonCoordinate.asSVY21());
    }

    @Test
    public void testNullInput() {
        LatLonCoordinate latLonCoordinate = null;
        assertThrows(NullPointerException.class, () -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testInvalidInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(Double.NaN, Double.NaN);
        assertThrows(IllegalArgumentException.class, () -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testReturnType() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(1.3539, 103.8189);
        assertTrue(latLonCoordinate.asSVY21() instanceof SVY21Coordinate);
    }

    @Test
    public void testConsistency() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(1.3539, 103.8189);
        SVY21Coordinate output1 = latLonCoordinate.asSVY21();
        SVY21Coordinate output2 = latLonCoordinate.asSVY21();
        assertEquals(output1, output2);
    }

    @Test
    public void testLargeInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(90, 180);
        assertDoesNotThrow(() -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testSmallInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(-90, -180);
        assertDoesNotThrow(() -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testBoundaryInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(Double.MAX_VALUE, Double.MAX_VALUE);
        assertThrows(IllegalArgumentException.class, () -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testRandomInput() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(Math.random()*180-90, Math.random()*360-180);
        assertDoesNotThrow(() -> latLonCoordinate.asSVY21());
    }

    @Test
    public void testThreadSafety() {
        LatLonCoordinate latLonCoordinate = new LatLonCoordinate(1.3539, 103.8189);
        assertDoesNotThrow(() -> {
            Thread t1 = new Thread(() -> latLonCoordinate.asSVY21());
            Thread t2 = new Thread(() -> latLonCoordinate.asSVY21());
            t1.start();
            t2.start();
            try {
                t1.join();
                t2.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
    }
}
