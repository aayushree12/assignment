/*
Test generated by RoostGPT for test Aayushree-Test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: IllegalArgumentException thrown with a custom message
   - Description: This scenario tests if the function properly handles IllegalArgumentException and returns a response with the correct status and body.
   - Steps: Throw an IllegalArgumentException with a custom message and call the handleCustomException function.
   - Expected Result: The function returns a ResponseEntity with a status of INTERNAL_SERVER_ERROR and a body that includes the custom message.

2. Test Scenario: IllegalArgumentException thrown without a custom message
   - Description: This scenario tests how the function handles IllegalArgumentExceptions that do not include a custom message.
   - Steps: Throw an IllegalArgumentException without a custom message and call the handleCustomException function.
   - Expected Result: The function returns a ResponseEntity with a status of INTERNAL_SERVER_ERROR and a body that includes a generic error message.

3. Test Scenario: Exception other than IllegalArgumentException thrown
   - Description: This scenario tests if the function properly handles exceptions other than IllegalArgumentException.
   - Steps: Throw an exception other than IllegalArgumentException and call the handleCustomException function.
   - Expected Result: The function does not handle the exception and it is propagated further up the call stack.

4. Test Scenario: No exception thrown
   - Description: This scenario tests how the function behaves when no exception is thrown.
   - Steps: Call the handleCustomException function without throwing an exception.
   - Expected Result: Since no exception is thrown, the function does not get invoked.

5. Test Scenario: NullPointerException thrown
   - Description: This scenario tests if the function properly handles a NullPointerException, which is a common exception in Java.
   - Steps: Throw a NullPointerException and call the handleCustomException function.
   - Expected Result: The function does not handle the exception as it is designed to handle IllegalArgumentExceptions only. The exception is propagated further up the call stack.

6. Test Scenario: IllegalArgumentException thrown with a null message
   - Description: This scenario tests how the function handles IllegalArgumentExceptions with a null message.
   - Steps: Throw an IllegalArgumentException with a null message and call the handleCustomException function.
   - Expected Result: The function returns a ResponseEntity with a status of INTERNAL_SERVER_ERROR and a body that includes a generic error message.
*/
package com.ttek.carparkfinder.exception;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class GlobalExceptionHandler_handleCustomException_d1aaaa0832_Test {

    private final GlobalExceptionHandler globalExceptionHandler = new GlobalExceptionHandler();

    @Test
    public void testHandleCustomException_withCustomMessage() {
        IllegalArgumentException ex = new IllegalArgumentException("Test Exception");
        ResponseEntity<String> response = globalExceptionHandler.handleCustomException(ex);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Custom Exception: Test Exception", response.getBody());
    }

    @Test
    public void testHandleCustomException_withoutCustomMessage() {
        IllegalArgumentException ex = new IllegalArgumentException();
        ResponseEntity<String> response = globalExceptionHandler.handleCustomException(ex);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Custom Exception: null", response.getBody());
    }

    @Test
    public void testHandleCustomException_withOtherException() {
        assertThrows(ClassCastException.class, () -> {
            Exception ex = new RuntimeException("Test Exception");
            globalExceptionHandler.handleCustomException((IllegalArgumentException) ex);
        });
    }

    @Test
    public void testHandleCustomException_withNoException() {
        assertThrows(NullPointerException.class, () -> globalExceptionHandler.handleCustomException(null));
    }

    @Test
    public void testHandleCustomException_withNullPointerException() {
        assertThrows(ClassCastException.class, () -> {
            Exception ex = new NullPointerException("Test Exception");
            globalExceptionHandler.handleCustomException((IllegalArgumentException) ex);
        });
    }

    @Test
    public void testHandleCustomException_withNullMessage() {
        IllegalArgumentException ex = new IllegalArgumentException(null);
        ResponseEntity<String> response = globalExceptionHandler.handleCustomException(ex);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Custom Exception: null", response.getBody());
    }
}
